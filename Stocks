/**
 * Program purpose: This program allows the user to manage stocks
 *
 * @author (AFIZUDIN FIRDAUS)
 * @version (DATE: 8/7/24)
 */
//import the packages 
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

public class ViewSupply implements ActionListener {
    //declare the components 
    private JFrame frame;
    private JButton btnEnter, btnHome, btnReset, btnDelete, btnEdit, btnSearch;
    private JLabel lblName, lblQuantity, lblPrice, lblCategory;
    private JTextField txtName, txtQuantity, txtPrice;
    private JPanel panel, panelBtn;
    private JTable table;
    private JScrollPane scrollPane;
    private ArrayList<Product> products;
    private JComboBox<String> comboBox;
    int id = 0;
    //constructor 
    public ViewSupply(ArrayList<Category.CategoryType> categoryTypes) {
        //instantiate the frame 
        frame = new JFrame("Stocks");
        frame.setTitle("Home Page - Current Stocks status");
        frame.setSize(600, 420); // Increased size to accommodate the table
        frame.setLayout(new BorderLayout());
        //instantiate the labels
        lblName = new JLabel("Product Name:");
        lblName.setFont(new Font("Arial", Font.BOLD, 14));
        lblQuantity = new JLabel("Quantity:");
        lblQuantity.setFont(new Font("Arial", Font.BOLD, 14));
        lblPrice = new JLabel("Price:");
        lblPrice.setFont(new Font("Arial", Font.BOLD, 14));
        lblCategory = new JLabel("Category:");
        lblCategory.setFont(new Font("Arial", Font.BOLD, 14));
        //instantiate the text fields
        txtName = new JTextField(10);
        txtQuantity = new JTextField(10);
        txtPrice = new JTextField(10);
        //instantiate the buttons 
        btnEnter = new JButton("Enter");
        btnDelete = new JButton("Delete");
        btnEdit = new JButton("Edit");
        btnHome = new JButton("Home");
        btnReset = new JButton("Reset");
        btnSearch = new JButton("Search");
        btnEnter.addActionListener(this);
        btnDelete.addActionListener(this);
        btnEdit.addActionListener(this);
        btnHome.addActionListener(this);
        btnReset.addActionListener(this);
        btnSearch.addActionListener(this);
        //instantiate the combo boxes 
        comboBox = new JComboBox<>();
        for (Category.CategoryType categoryType : categoryTypes) {
            comboBox.addItem(categoryType.getName());
        }
        //instantiate the panel 
        panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;
        //add components to the panel 
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(lblName, gbc);
        gbc.gridx = 1;
        panel.add(txtName, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        panel.add(lblQuantity, gbc);
        gbc.gridx = 1;
        panel.add(txtQuantity, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        panel.add(lblPrice, gbc);
        gbc.gridx = 1;
        panel.add(txtPrice, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        panel.add(lblCategory, gbc);
        gbc.gridx = 1;
        panel.add(comboBox, gbc);

        panelBtn = new JPanel();
        panelBtn.setLayout(new FlowLayout());
        panelBtn.add(btnEnter);
        panelBtn.add(btnDelete);
        panelBtn.add(btnEdit);
        panelBtn.add(btnReset);
        panelBtn.add(btnSearch);
        panelBtn.add(btnHome);

        frame.add(panel, BorderLayout.CENTER);
        frame.add(panelBtn, BorderLayout.SOUTH);

        // Initialize table and add it to a scroll pane
        String[] columnNames = {"Category", "Product Name", "Quantity", "Price", "ID No"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        table = new JTable(model);
        //if the mouse is clicked 
        table.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent evt) {
                    tableMouseClicked(evt);
                }
            });
        scrollPane = new JScrollPane(table);
        //add components to the frame
        frame.add(scrollPane, BorderLayout.EAST);

        products = new ArrayList<>();//instantiate the array list 

        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    //if mouse is clicked 
    public void tableMouseClicked(MouseEvent evt) {
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();

        String tblName = tblModel.getValueAt(table.getSelectedRow(), 1).toString();
        String tblQuantity = tblModel.getValueAt(table.getSelectedRow(), 2).toString();
        String tblPrice = tblModel.getValueAt(table.getSelectedRow(), 3).toString();

        txtName.setText(tblName);
        txtQuantity.setText(tblQuantity);
        txtPrice.setText(tblPrice);
    }

    public void actionPerformed(ActionEvent e) {
        //if the enter button is pressed 
        if (e.getSource() == btnEnter) {
            //if the input is not given 
            if (txtName.getText().equals("") || txtQuantity.getText().equals("") || txtPrice.getText().equals("")|| comboBox.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(null, "Please Enter ALL Data", "ERROR", JOptionPane.ERROR_MESSAGE);
                //if the input is given 
            } else {
                try {
                    //store the input in the variables
                    String name = txtName.getText();
                    String selected = comboBox.getSelectedItem().toString();
                    int quantity = Integer.parseInt(txtQuantity.getText());
                    double price = Double.parseDouble(txtPrice.getText());
                    //if the input is less or equal to 0
                    if (quantity <= 0) {
                        JOptionPane.showMessageDialog(null, "Quantity must be greater than 0", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    } 
                    //if the input is less or equal to 0
                    else if (price <= 0) {
                        JOptionPane.showMessageDialog(null, "Price must be greater than 0", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    products.add(new Product(name, quantity, price, id));

                    String[] data = {selected, txtName.getText(), String.valueOf(quantity), String.valueOf(price), String.valueOf(id)};
                    DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
                    tblModel.addRow(data);

                    JOptionPane.showMessageDialog(null, "Data added successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    id++;
                    // Clear the text fields
                    txtName.setText("");
                    txtQuantity.setText("");
                    txtPrice.setText("");

                    // Revalidate and repaint frame to ensure updates are shown
                    frame.revalidate();
                    frame.repaint();
                    //if the input is wrong 
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter valid values for Quantity and Price.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
            //if the home button is pressed 
        } else if (e.getSource() == btnHome) {
            frame.dispose();//close the current frame 
            new HomePageFrame();//open the home page 
        }
        //if the reset button is pressed 
        else if (e.getSource() == btnReset) {
            //clear the text fields
            txtName.setText("");
            txtQuantity.setText("");
            txtPrice.setText("");
        } 
        //if the delete button is pressed 
        else if (e.getSource() == btnDelete) {
            DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
            //if a row is selected
            if (table.getSelectedRowCount() == 1) {
                int row = table.getSelectedRow();
                products.remove(row);
                tblModel.removeRow(row);
            } else {
                if (table.getRowCount() == 0)//if the tabel is empty
                    JOptionPane.showMessageDialog(null, "The table is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
                else//if no row is selected
                    JOptionPane.showMessageDialog(null, "Please select a single row to be deleted.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } 
        //if the edit button is selected 
        else if (e.getSource() == btnEdit) {
            DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
            //if a row is selected 
            if (table.getSelectedRowCount() == 1) {
                try {
                    //store the input in the variables 
                    String name = txtName.getText();
                    String selectedCategory = comboBox.getSelectedItem().toString();
                    int quantity = Integer.parseInt(txtQuantity.getText());
                    double price = Double.parseDouble(txtPrice.getText());
                    //if the input is less than or equal to 0
                    if (quantity <= 0) {
                        JOptionPane.showMessageDialog(null, "Quantity must be greater than 0", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    } 
                    //if the input is less than or equal to 0
                    else if (price <= 0) {
                        JOptionPane.showMessageDialog(null, "Price must be greater than 0", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    int row = table.getSelectedRow();
                    tblModel.setValueAt(selectedCategory, table.getSelectedRow(), 0);
                    tblModel.setValueAt(name, row, 1);
                    tblModel.setValueAt(quantity, row, 2);
                    tblModel.setValueAt(price, row, 3);
                    //update the table 
                    Product product = products.get(row);
                    product.setName(name);
                    product.setQuantity(quantity);
                    product.setPrice(price);

                    JOptionPane.showMessageDialog(null, "Data updated successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                } 
                //if the input is wrong 
                catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter valid values for Quantity and Price.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else if (table.getRowCount() == 0)//if the table is empty 
                JOptionPane.showMessageDialog(null, "The table is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
            else//if no row is selected 
                JOptionPane.showMessageDialog(null, "Please select a single row to be updated.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } 
        //if the search button is pressed 
        else if (e.getSource() == btnSearch) {
            try {
                //store the input in a variable 
                int searchIndex = Integer.parseInt(JOptionPane.showInputDialog("Please Enter the ID No."));
                //if the input is greater than or equal to 0
                if (searchIndex >= 0) {
                    //if the table is empty 
                    if (table.getRowCount() == 0)
                        JOptionPane.showMessageDialog(null, "The table is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
                    //if the table has contents     
                    else {
                        for (Product product : products) {
                            if (product.getId() == searchIndex) {
                                JOptionPane.showMessageDialog(null, "Product: " + product.getName() + "\nQuantity: " + product.getQuantity() + "\nPrice: " + product.getPrice(), "Details", JOptionPane.INFORMATION_MESSAGE);
                                return;
                            }
                        }
                        //if product is not found
                        JOptionPane.showMessageDialog(null, "No product found with the given ID No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else//if the input is negative 
                    JOptionPane.showMessageDialog(null, "Enter positive integer values for the ID No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            } 
            //if the input is wrong 
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter valid integer values for the ID No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    //class Product definition
    class Product {
        //declaration of variables
        private String name;
        private int quantity;
        private double price;
        private int id;
        //constructor with input 
        public Product(String name, int quantity, double price, int id) {
            this.name = name;
            this.quantity = quantity;
            this.price = price;
            this.id = id;
        }
        //accessor and mutator method 
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getQuantity() {
            return quantity;
        }

        public void setQuantity(int quantity) {
            this.quantity = quantity;
        }

        public double getPrice() {
            return price;
        }

        public void setPrice(double price) {
            this.price = price;
        }

        public int getId() {
            return id;
        }
    }
}
